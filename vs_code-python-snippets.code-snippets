{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //  "scope": "javascript,typescript",
    //  "prefix": "log",
    //  "body": [
    //      "console.log('$1');",
    //      "$2"
    //  ],
    //  "description": "Log output to console"
    // }
    "f-string": {
        "scope": "python",
        "prefix": "f",
        "body": [
            "f\"$1{$2:,}$3\"$0"
        ],
        "description": "insert f-string"
    },
    "pandas-peak": {
        "scope": "python",
        "prefix": "peak",
        "body": [
            "iloc[0].transpose()$0"
        ],
        "description": "pandas - reset index"
    },
    "pandas-reset-index": {
        "scope": "python",
        "prefix": "reset",
        "body": [
            "$1 = $1.reset_index(drop=True)\n$0"
        ],
        "description": "pandas - reset index"
    },
    "pandas-rename-columns": {
        "scope": "python",
        "prefix": "rename",
        "body": [
            "rename(columns={'$1': '$2'})$0"
        ],
        "description": "pandas - reset index"
    },
    "pandas-groupby": {
        "scope": "python",
        "prefix": "groupby",
        "body": [
            "def f(x):",
            "    d = dict()",
            "    $0d['Num Records'] = len(x)",
            "    return pd.Series(d)",
            "",
            "grouped_${1:df} = (",
            "    ${1:df}",
            "    .groupby(['${2:column}'])",
            "    .apply(f)",
            "    .reset_index()",
            "    .sort_values(['${2:column}'], ascending=False)",
            ")",
            "grouped_${1:df}.head()"
        ],
        "description": "pandas - groupby"
    },
    "pandas-apply": {
        "scope": "python",
        "prefix": "apply",
        "body": [
            "apply(lambda x: ${1:x})$0"
        ],
        "description": "pandas - reset index"
    },
    "pandas-sort-values": {
        "scope": "python",
        "prefix": "sort_values",
        "body": [
            "sort_values(['${1:column}'], ascending=${2:False})",
            "$0"
        ],
        "description": "pandas - reset index"
    },
    "pandas-style": {
        "scope": "python",
        "prefix": "style",
        "body": [
            "style",
            ".hide(axis='index')",
            ".bar(subset=['${1:column}'], color='${2:lightgray}')",
            ".format(subset=['${1:column}'], formatter=lambda x: f'{x:.1%}')$0"
        ],
        "description": "pandas - style dataframe"
    },
    "pandas-merge": {
        "scope": "python",
        "prefix": "merge",
        "body": [
            "pd.merge(",
            "    $1,",
            "    $2,",
            "    on='$3',",
            "    how='${4:inner}'",
            ")",
            "$0"
        ],
        "description": "pandas - merge dataframes"
    },
    "pandas-to-csv": {
        "scope": "python",
        "prefix": "csv",
        "body": [
            "$1.to_csv($2, index=False)",
            "$0"
        ],
        "description": "pandas - to csv"
    },
    "sorted-dictionary": {
        "scope": "python",
        "prefix": "sortdict",
        "body": [
            "${1:x} = dict(sorted(${1:x}.items(), key=lambda i: i[1], reverse=${2:True}))$0"
        ],
        "description": "sort a dictionary"
    },
    "function-definition": {
        "scope": "python",
        "prefix": "def",
        "body": [
            "def ${1:func}(${2:arg}: ${3:type}) -> ${4:return_type}:",
            "    $0"
        ],
        "description": "create a function"
    },
    "doc-string": {
        "scope": "python",
        "prefix": "doc",
        "body": [
            "\"\"\"",
            "${1:Description}",
            "",
            ">>> print(1)",
            "1",
            "",
            "Args:",
            "    ${2:arg}: ${3:description}",
            "\"\"\"",
            "$0"
        ],
        "description": "insert doc-string"
    },
    "main": {
        "scope": "python",
        "prefix": "main",
        "body": [
            "def main():",
            "    ${0:pass}",
            "",
            "",
            "if __name__ == '__main__':",
            "    main()",
            ""
        ],
        "description": "createa a main function"
    },
    "px_plot": {
        "scope": "python",
        "prefix": "px_plot",
        "body": [
            "fig = px.${1:bar}(",
            "    data_frame=${2:df},",
            "    x='${3:x}',",
            "    y='${4:y}',",
            "    labels={'${3:x}': \"${5:x-label}\", '${4:y}': \"${6:y-label}\"},",
            "    category_orders={'column_1': ['value_1', 'value_2']},",
            "    title=\"${7:title}<br><sup>${8:subtitle}</sup>\",",
            ")",
            "fig.show()$0"
        ],
        "description": "independent axix values per facet"
    },
    "px_axis_label_rotate": {
        "scope": "python",
        "prefix": "px_axis_label_rotate",
        "body": [
            "fig.update_${1:x}axes(tickangle=${2:90})$0",
        ],
        "description": "rotate the labels in an axis"
    },
    "px_axis_reverse": {
        "scope": "python",
        "prefix": "px_axis_reverse",
        "body": [
            "fig.update_${1:y}axes(autorange=\"reversed\")$0",
        ],
        "description": "independent axix values per facet"
    },
    "px_free_axis": {
        "scope": "python",
        "prefix": "px_free_axis",
        "body": [
            "fig.update_${1:y}axes(matches=None)",
            "fig.for_each_${1:y}axis(lambda axis: axis.update(showticklabels=True))$0"
        ],
        "description": "independent axix values per facet"
    },
    "px_log_10_axis": {
        "scope": "python",
        "prefix": "px_log_10_axis",
        "body": [
            "def px_log_10_axis(fig, min_value: int | float, max_value: int | float, step: int | float, axis:str = 'x'):",
            "    \"\"\"",
            "    Use this function to transform the ticks/labels of the x-axis of a plotly-express graph to",
            "    log10.",
            "",
            "    Example:",
            "",
            "    ```",
            "    fig = px.histogram(",
            "        np.log10(values),",
            "        title=\"Histogram of 'values' (Log10)\"",
            "    )",
            "    px_log_10_axis(fig)",
            "    ```",
            "    \"\"\"",
            "    import numpy as np",
            "    values = list(np.arange(min_value, max_value, step))",
            "    axis_value = dict(",
            "        tickvals=values,",
            "        ticktext=[round(10 ** x) for x in values],",
            "    )",
            "    if axis == 'x':",
            "        fig.update_layout(xaxis=axis_value)",
            "    else:",
            "        fig.update_layout(yaxis=axis_value)",
            "    return fig",
            "",
            "px_log_10_axis(fig, axis='${1:x}', min_value=${2:0}, max_value=${3:1000}, step=${4:1})$0"
        ],
        "description": "independent axix values per facet"
    },
    "quantiles": {
        "scope": "python",
        "prefix": "quantiles",
        "body": [
            "import numpy as np",
            "import pandas as pd",
            "",
            "def quantiles_dataframe(",
            "        data: list[float] | np.ndarray,",
            "        quantiles: list[float] | np.ndarray = np.arange(0, 1.1, 0.1),",
            "        round_by: int = 2) -> pd.io.formats.style.Styler:",
            "    \"\"\"",
            "    Create a DataFrame containing quantiles of the given data.",
            "",
            "    Parameters:",
            "        data: The list or NumPy array containing the data.",
            "        quantiles: A list of quantiles to calculate (values should be between 0 and 1).",
            "",
            "    Returns:",
            "        pd.DataFrame: A DataFrame with quantiles as rows and the specified quantiles as columns.",
            "    \"\"\"",
            "    quantile_values = np.quantile(data, quantiles)",
            "    quantile_values = [f\"{q:.{round_by}f}\" for q in quantile_values]",
            "    quantiles_df = (",
            "        pd.DataFrame(",
            "            [quantile_values],",
            "            columns=[f'{int(q*100)}%' for q in quantiles]",
            "        )",
            "        .transpose()",
            "        .reset_index(drop=False)",
            "        .rename(columns={'index': 'Percentile', 0: 'Value'})",
            "    )",
            "    styled_df = quantiles_df.style.hide(axis='index')",
            "    return styled_df",
            "",
            "quantiles_dataframe(",
            "    ${1:data},",
            "    quantiles=np.arange(0, 1.${2:1}, 0.${2:1}), round_by=${3:2}",
            ")$0",
        ],
        "description": "display the quantiles of an array"
    },
    "date_to_string": {
        "scope": "python",
        "prefix": "date_to_string",
        "body": [
            "strftime('%Y-%m-%d')$0"
        ],
        "description": "get the size of an object in MB"
    },
    "size_of": {
        "scope": "python",
        "prefix": "size_of",
        "body": [
            "import sys",
            "print(f\"{sys.getsizeof($1) / (1024**2): .2} MB\")$0"
        ],
        "description": "get the size of an object in MB"
    },
    "read-file": {
        "scope": "python",
        "prefix": "read-file",
        "body": [
            "with open(${1:file_name}, '${2:r}') as _handle:",
            "    ${3:content} = _handle.readlines()",
            "$0"
        ],
        "description": "Open and read from a file."
    },
    "read-yaml": {
        "scope": "python",
        "prefix": "read-yaml",
        "body": [
            "import yaml",
            "with open(${1:file_name}) as _handle:",
            "    ${2:yaml_data} = yaml.safe_load(_handle)",
            "$0"
        ],
        "description": "Open and read a yaml file."
    },
    "file_exists": {
        "scope": "python",
        "prefix": "file_exists",
        "body": [
            "import os.path",
            "os.path.isfile($1)$0"
        ],
        "description": "check if a file exists"
    },
    "file_delete": {
        "scope": "python",
        "prefix": "file_delete",
        "body": [
            "import os",
            "os.remove($1)$0"
        ],
        "description": "remove a file"
    },
    "lambda": {
        "scope": "python",
        "prefix": "lam",
        "body": [
            "lambda ${1:x}: ${1:x}$0",
        ],
        "description": "create lambda"
    },
    "date_trunc": {
        "scope": "python",
        "prefix": "date_trunc",
        "body": [
            "${1:df}['${2:MONTH}'] = ${1:df}['${3:DATE}'].dt.to_period('M').dt.to_timestamp()$0",
        ],
        "description": "create lambda"
    },
}
